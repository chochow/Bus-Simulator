/**
 *
 * @Copyright 2019 3081 Staff, All rights reserved.
 *
 * STUDENTS:  DO NOT EDIT THIS FILE.  INSTEAD, MODIFY YOUR OWN PROJECT
 * CODE TO FIT THE SPECIFICATION GIVEN BY THE TESTS IN THIS FILE.
 *
 * If you DO modify it, we overwrite it with a fresh version from our repo
 * when grading, so you can't use it to fudge the tests anyway.
 *
 * This file is used by the CS3081W auto-grading system.
 *
 * Please note, the assessment tests for grading, will use the same include
 * files, class names, and function names for accessing students' code that you
 * find in this file.  So students, if you write your code so that it passes
 * these feedback tests, you can be assured that the auto-grader will at least
 * be able to properly link with your code.
 */

/*******************************************************************************
 * Includes
 ******************************************************************************/
#include <gtest/gtest.h>
#include <iostream>
#include <vector>
#include <list>
#include <random>
#include <ctime>
#include <string>
#include <fstream>
#include "../src/bus.h"
#include "../src/passenger.h"
#include "../src/random_passenger_generator.h"
#include "../src/route.h"
#include "../src/stop.h"

/******************************************************
* TEST FEATURE SetUp
*******************************************************/

class StopTests : public ::testing::Test {
 protected:
    Stop* stop1;

    virtual void SetUp() {
        stop1 = new Stop (1,  44.973723, -93.235365);
    }

    virtual void TearDown() {
        delete stop1;
    }
};

TEST_F(StopTests, ConstructorTest) {
    EXPECT_EQ(stop1->GetId(), 1);
    Stop* stop2;
    stop2 = new Stop (11, 123.1, 113.1);
    EXPECT_EQ(stop2->GetId(), 11);
}

TEST_F(StopTests, GetStopData) {
    StopData stop_ds = stop1->GetStopData();
    EXPECT_EQ(stop_ds.id, "1");
	EXPECT_FLOAT_EQ(stop_ds.position.x, 44.973723);
	EXPECT_FLOAT_EQ(stop_ds.position.y, -93.235365);
	EXPECT_EQ(stop_ds.num_people, 0);
}


TEST_F(StopTests, GetIdTest) {
    EXPECT_EQ(stop1->GetId(), 1);
    int id = stop1->GetId();
    bool expected_out_1 = (id == 2);
    EXPECT_EQ(expected_out_1, false);
}

TEST_F(StopTests, AddPassengersTest) {
    EXPECT_EQ(stop1->AddPassengers(new Passenger(2, "whoisthere")), 1);
}

TEST_F(StopTests, LoadPassengersTest) {
    Bus * bus1;
    bus1 = new Bus("bus1", NULL, NULL, 3, 1);
    stop1->AddPassengers(new Passenger(2, "sorry"));
    EXPECT_EQ(stop1->LoadPassengers(bus1), 1);
    stop1->AddPassengers(new Passenger(3, "sorry"));
    stop1->AddPassengers(new Passenger(4, "sorry"));
    EXPECT_EQ(stop1->LoadPassengers(bus1), 2);
    stop1->AddPassengers(new Passenger(11, "sorry"));
    EXPECT_EQ(stop1->LoadPassengers(bus1), 0);
}

TEST_F(StopTests, UpdateandReportTest) {
    stop1->AddPassengers(new Passenger(3, "sorry"));
    testing::internal::CaptureStdout();
    stop1->Report(std::cout);
    std::string output_1 = testing::internal::GetCapturedStdout();
    EXPECT_EQ(output_1,
    "ID: 1\nPassengers waiting: 1\nName: sorry\nDestination: 3\nTotal Wait:"\
    " 0\n\tWait at Stop: 0\n\tTime on bus: 0\n");
    stop1->Update();
    testing::internal::CaptureStdout();
    stop1->Report(std::cout);
    std::string output_2 = testing::internal::GetCapturedStdout();
    EXPECT_EQ(output_2,
    "ID: 1\nPassengers waiting: 1\nName: sorry\nDestination: 3\nTotal Wait:"\
    " 1\n\tWait at Stop: 1\n\tTime on bus: 0\n");
}


